#!/bin/bash
##Insert License
#//////////////////////////////////////////////////////////////////////////////
#||||||||||||||||||||||||||     Setup          ||||||||||||||||||||||||||||||||
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
###############################################################################
#                                  Variables                                  #
###############################################################################
progress_file="/tmp/install_progress.txt"
###############################################################################
#                                   Functions                                 #
###############################################################################
check_mysql_installed() {
  if command -v mysql > /dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

log() {
    local level="$2"
    local message="$1"
    local lineno="${BASH_LINENO[0]}"
    if [ "$level" = "ERROR" ]; then
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $level:$lineno - $message" >> install.log
    else
        echo "$(date '+%Y-%m-%d %H:%M:%S') - $level - $message" >> install.log
    fi
}
setup_service() {
    local service_file=$1
    local dest_path=$2
    local owner=$3
    local permissions=$4

    # Move the service file
    output=$(sudo mv ${service_file} ${dest_path} 2>&1)
    if [ $? -eq 0 ]; then
        log "Moved ${service_file} into place." "INFO"
    else
        log "Failed to move ${service_file} into place. Error: $output" "ERROR"
        return 1
    fi

    # Set the owner
    output=$(sudo chown ${owner} ${dest_path} 2>&1)
    if [ $? -eq 0 ]; then
        log "Set owner ${dest_path} to ${owner}." "INFO"
    else
        log "Failed to set owner ${dest_path} to ${owner}. Error: $output" "ERROR"
        return 1
    fi

    # Set the permissions
    output=$(sudo chmod ${permissions} ${dest_path} 2>&1)
    if [ $? -eq 0 ]; then
        log "Modified ${dest_path} to ${permissions}." "INFO"
    else
        log "Failed to modify ${dest_path} to ${permissions}. Error: $output" "ERROR"
        return 1
    fi
}
###############################################################################
#                  Check if the script is running as root                     #
###############################################################################
if [ "$(id -u)" -ne 0 ]; then
    log "Please run as root." "ERROR"
    echo "This script must be run as root.  Please try again with sudo."
    exit 1
fi


###############################################################################
#               Check if the script is running on Ubuntu 22.04                #
###############################################################################
if ! grep -qE 'Ubuntu (22|[2-9][0-9])\.' /etc/os-release; then
    log "Gustave is only supported on Ubuntu 22 or greater." "ERROR"
    echo "Gustave is only supported on Ubuntu 22 or greater.  Please try again with Ubuntu 22 or greater."
    exit 1
fi


###############################################################################
#Updating package index
###############################################################################
echo -n "Updating package index..."
sudo apt update &> /dev/null &
pid=$! # Process Id of the previous running command

spin='-\|/'

i=0
while kill -0 $pid 2>/dev/null
do
  i=$(( (i+1) %4 ))
  printf "\b${spin:$i:1}"
  sleep .1
done
wait $pid


#//////////////////////////////////////////////////////////////////////////////
#|||||||||||||||||||       Install Dependencies          ||||||||||||||||||||||
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
###############################################################################
#               Check if jq is installed and install it if not                #
###############################################################################
if ! command -v jq >/dev/null 2>&1; then
    log "jq not installed.  Installing jq" "INFO"
    echo -n "Installing dependencies..."
    # Try to install jq
    sudo apt install -y jq &> /dev/null &
    pid=$! # Process Id of the previous running command

    spin='-\|/'

    i=0
    while kill -0 $pid 2>/dev/null
    do
      i=$(( (i+1) %4 ))
      printf "\b${spin:$i:1}"
      sleep .1
    done
    wait $pid
    log "jq has been installed" "INFO"
fi


###############################################################################
#               Check if dialog is installed and install it if not            #
###############################################################################
if ! command -v dialog >/dev/null 2>&1; then
    log "dialog not installed.  Installing dialog" "INFO"
    echo -ne "\r\e[K"
    echo -n "Installing dependencies..."
    # Try to install dialog
    sudo apt install -y dialog &> /dev/null &
    pid=$! # Process Id of the previous running command

    spin='-\|/'

    i=0
    while kill -0 $pid 2>/dev/null
    do
      i=$(( (i+1) %4 ))
      printf "\b${spin:$i:1}"
      sleep .1
    done
    wait $pid
    log "dialog has been installed" "INFO"
fi


###############################################################################
#          Check if python3-apt is installed and install it if not            #
###############################################################################
if ! command -v python3-apt >/dev/null 2>&1; then
    log "python3-apt not installed.  Installing python3-apt" "INFO"
    echo -ne "\r\e[K"
    echo -n "Installing dependencies..."
    # Try to install python3-apt
    sudo apt install -y python3-apt &> /dev/null &
    pid=$! # Process Id of the previous running command

    spin='-\|/'

    i=0
    while kill -0 $pid 2>/dev/null
    do
      i=$(( (i+1) %4 ))
      printf "\b${spin:$i:1}"
      sleep .1
    done
    wait $pid
    log "python3-apt has been installed" "INFO"
fi


#//////////////////////////////////////////////////////////////////////////////
#/////////////////////////           Begin          ///////////////////////////
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
###############################################################################
#                                  Start Dialog                               #
###############################################################################
log "starting Dialog now" "INFO"
dialog --title "Welcome" --msgbox "Greetings, esteemed guest! Welcome to the illustrious Gustave installation process. Shall we begin?" 10 40


#//////////////////////////////////////////////////////////////////////////////#
#|||||||||||||||||||||||||       License        |||||||||||||||||||||||||||||||#
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\#
license=""
while true; do
    license=$(dialog --stdout --inputbox "Splendid! Now, could you please provide us with your Activation Code?" 10 60)
    
    # If the input is 16 alphanumeric characters without hyphens, insert the hyphens
    if [[ $license =~ ^[0-9a-zA-Z]{16}$ ]]; then
        license="${license:0:4}-${license:4:4}-${license:8:4}-${license:12:4}"
    fi

    # Validate the input (with or without auto-added hyphens)
    if [[ $license =~ ^[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}-[0-9a-zA-Z]{4}$ ]]; then
        break
    else
        dialog --msgbox "That doesn't look like a proper Code. Please double-check your activation code." 10 60
    fi
done


#//////////////////////////////////////////////////////////////////////////////
#||||||||||||||||||||||||||||    MySQL          ||||||||||||||||||||||||||||||
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
if check_mysql_installed; then
  log "MySQL is already installed." "INFO"
else
  log "MySQL is not installed." "INFO"
  # Ask the user if they want to install MySQL
  if dialog --yesno "MySQL is not installed. Do you want to install it?" 10 40; then
    # Try to install MySQL
    sudo python3 ./.Installers/MySQL.py > /dev/null 2>&1 &
    if [ $? -eq 0 ]; then
      log "MySQL has been installed" "INFO"
      mysql_installed=1
    else
      log "Failed to install MySQL" "ERROR"
    fi

    while [ ! -f $progress_file ]
    do
      sleep 0.1
    done

    (
    while true
    do
        # Get the last line of the progress file that contains 'Percent' and extract the percentage
        progress=$(grep 'Percent:' $progress_file | tail -n1 | awk -F 'Percent: ' '{ print $2 }' | awk -F '.' '{ print $1 }')

        # Check if the progress is 100, if so, break the loop
        if [ "$progress" == "100" ]; then
            break
        fi

        # Update the dialog command's progress bar
        echo $progress

        # Wait a bit before checking the progress again
        sleep 0.1
    done
    ) | dialog --gauge "Installing MySQL..." 10 70 0
    # Check if MySQL was installed successfully
    if check_mysql_installed; then
      log "MySQL was installed successfully." "INFO"
      install_mysql=1
    else
      log "MySQL was not installed successfully." "ERROR"
      dialog --title "Installation Error" --msgbox "MySQL was not installed successfully. Please check the log for more information." 10 40
      clear
      exit 1
    fi
  else
    # User chose not to install MySQL
    log "User chose not to install MySQL." "INFO"
    install_mysql=0
  fi
fi


###############################################################################
# Prompt the user for MySQL Values
###############################################################################
if [ "$install_mysql" != "1" ]; then
  dialog --title "MySQL" --msgbox "MySQL is required for gustave to function properly. Please provide the following information." 10 40
  mysql_host=$(dialog --stdout --inputbox "MySQL Host:" 0 0)
fi
mysql_user=$(dialog --stdout --inputbox "MySQL User:" 0 0)
mysql_password=$(dialog --stdout --passwordbox "MySQL Password:" 0 0)
mysql_db=$(dialog --stdout --inputbox "MySQL Database:" 0 0)


###############################################################################
# Create the database                                                         #
###############################################################################
if [ "$install_mysql" != "0" ]; then
  log "Creating the database." "INFO"
  dialog --infobox "Creating the database..." 10 40

  # Create the database
  sudo mysql -u root -e "CREATE DATABASE $mysql_db;" || log "Failed to create database." "ERROR"

  # Create the user
  sudo mysql -u root -e "CREATE USER '$mysql_user'@'localhost' IDENTIFIED BY '$mysql_password';" || log "Failed to create user." "ERROR"
  sudo mysql -u root -e "GRANT ALL PRIVILEGES ON $mysql_db.* TO '$mysql_user'@'localhost';" || log "Failed to grant privileges." "ERROR"
  sudo mysql -u root -e "FLUSH PRIVILEGES;" || log "Failed to flush privileges." "ERROR"

  # Create the secret_table
  sudo mysql -u root -e "USE $mysql_db; CREATE TABLE secret_table (\
  id INT NOT NULL AUTO_INCREMENT, \
  udid VARCHAR(255) NOT NULL, \
  secret VARCHAR(255) NOT NULL, \
  computer_id INT NOT NULL, \
  expiration INT NOT NULL, \
  is_active TINYINT(1) DEFAULT 1, \
  PRIMARY KEY (id));" || log "Failed to create secret_table." "ERROR"

  # Create the active_profiles table
  sudo mysql -u root -e "USE $mysql_db; CREATE TABLE active_profiles (profile_id INT NOT NULL, computer_id INT NOT NULL, PRIMARY KEY (profile_id));" || log "Failed to create active_profiles table." "ERROR"

  # Create the expired_profiles table
  sudo mysql -u root -e "USE $mysql_db; CREATE TABLE expired_profiles (\
  profile_id INT NOT NULL, \
  computer_id INT NOT NULL, \
  PRIMARY KEY (profile_id));" || log "Failed to create expired_profiles table." "ERROR"

  log "Database created successfully." "INFO"
fi

sleep 1
#//////////////////////////////////////////////////////////////////////////////
#||||||||||||||||||||||||||||    Redis          ||||||||||||||||||||||||||||||
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
if check_redis_installed; then
  log "Redis is already installed." "INFO"
else
  log "Redis is not installed." "INFO"
  # Ask the user if they want to install Redis
  if dialog --yesno "Redis is not installed. Do you want to install it? Redis is required for gustave to function properly" 10 40; then
    # User chose to install Redis
    log "User chose to install Redis." "INFO"
    # Try to install Redis
    rm -f $progress_file
    sudo python3 ./.Installers/Redis.py > /dev/null 2>&1 &
    if [ $? -eq 0 ]; then
      log "Redis has been installed" "INFO"
    else
      log "Failed to install Redis" "ERROR"
    fi
    log "Waiting for Redis to finish installing..." "INFO"

    while [ ! -f $progress_file ]
    do
      sleep 0.1
    done

    (
    while true
    do
        progress=$(grep 'Percent:' $progress_file | tail -n1 | awk -F 'Percent: ' '{ print $2 }' | awk -F '.' '{ print $1 }')

        if [ "$progress" == "100" ]; then
            break
        fi

        echo $progress
        sleep 0.1
    done
    ) | dialog --gauge "Installing Redis..." 10 70 0

    if check_redis_installed; then
      log "Redis was installed successfully." "INFO"
      install_redis=1
    else
      log "Redis was not installed successfully." "ERROR"
      dialog --title "Installation Error" --msgbox "Redis was not installed successfully. Please check the log for more information." 10 40
      clear
      exit 1
    fi
  else
    log "User chose not to install Redis." "INFO"
    install_redis=0
  fi
fi


#//////////////////////////////////////////////////////////////////////////////
#||||||||||||||||||||||||||||    Celery          ||||||||||||||||||||||||||||||
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
if check_celery_installed; then
  log "Celery is already installed." "INFO"
else
  log "Celery is not installed." "INFO"
  # Ask the user if they want to install Celery
  if dialog --yesno "Celery is not installed. Do you want to install it?" 10 40; then
    # User chose to install Celery
    log "User chose to install Celery." "INFO"
    # Try to install Celery
    sudo python3 ./.Installers/Celery.py > /dev/null 2>&1 &
    if [ $? -eq 0 ]; then
      log "Celery has been installed" "INFO"
    else
      log "Failed to install Celery" "ERROR"
    fi
    log "Waiting for Celery to finish installing..." "INFO"

    while [ ! -f $progress_file ]
    do
      sleep 0.1
    done

    (
    while true
    do
        # Get the last line of the progress file that contains 'Percent' and extract the percentage
        progress=$(grep 'Percent:' $progress_file | tail -n1 | awk -F 'Percent: ' '{ print $2 }' | awk -F '.' '{ print $1 }')

        # Check if the progress is 100, if so, break the loop
        if [ "$progress" == "100" ]; then
            break
        fi

        # Update the dialog command's progress bar
        echo $progress

        # Wait a bit before checking the progress again
        sleep 0.1
    done
    ) else
    log "User chose not to install Celery." "INFO"
  fi
fi


#//////////////////////////////////////////////////////////////////////////////#
#|||||||||||||||||||||||||       Jamf Pro        |||||||||||||||||||||||||||||#
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\#
jamf_pro_url=""
while [[ ! $jamf_pro_url =~ ^https:// ]]; do
  jamf_pro_url=$(dialog --stdout --inputbox "Dear esteemed guest, may we kindly request the URL of your Jamf Pro server?" 10 60)
  if [[ -z "$jamf_pro_url" ]]; then
    dialog --title "Input Required" --msgbox "Bro, you gotta give me the URL of your Jamf Pro server. It's required!" 10 40
  elif [[ ! $jamf_pro_url =~ ^https:// ]]; then
    dialog --title "Invalid Input" --msgbox "Bro, the URL of your Jamf Pro server should start with 'https://'. Let's try that again!" 10 40
    jamf_pro_url="" # Reset the variable to prompt the user again
  fi
done

jamf_pro_username=""
while [[ -z "$jamf_pro_username" ]]; do
  jamf_pro_username=$(dialog --stdout --inputbox "Splendid! Now, could you please provide us with your Jamf Pro username?" 10 60)
  if [[ -z "$jamf_pro_username" ]]; then
    dialog --title "Input Required" --msgbox "Bro, you gotta give me your Jamf Pro username. It's required!" 10 40
  fi
done

jamf_pro_password=""
while [[ -z "$jamf_pro_password" ]]; do
  jamf_pro_password=$(dialog --stdout --passwordbox "Thank you! For security reasons, could you please silently enter your Jamf Pro password?" 10 60)
  if [[ -z "$jamf_pro_password" ]]; then
    dialog --title "Input Required" --msgbox "Bro, you gotta give me your Jamf Pro password. It's required!" 10 40
  elif [[ "$jamf_pro_password" == "jamf1234" ]]; then
    dialog --title "Weak Password Alert" --msgbox "Bro, 'jamf1234'? You should really change your password. But for now, let's continue." 10 40
  fi
done
category_name=""
while [[ -z "$category_name" ]]; do
  category_name=$(dialog --stdout --inputbox "CATEGORY_NAME:" 0 0)
  if [[ -z "$category_name" ]]; then
    dialog --title "Input Required" --msgbox "Bro, you gotta give me the category name. It's required!" 10 40
  fi
done


###############################################################################
# Create the category in Jamf Pro
###############################################################################
requestToken=$(curl -s -u "$jamf_pro_username":"$jamf_pro_password" "$jamf_pro_url"/api/v1/auth/token -X POST)
token=$(echo "$requestToken" | jq -r '.token')
# Create the category and get the ID
response=$(curl -s -X POST "$jamf_pro_url/api/v1/categories" -H "accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $token" -d "{\"name\":\"$category_name\",\"priority\":9}")
category_id=$(echo "$response" | jq -r '.id')
# Check if the category was created successfully
if [[ "$category_id" == null ]]; then
  dialog --title "API Error" --msgbox "Bro, there was an error creating the category. Check your Jamf Pro URL and credentials and try again." 10 40
  log "Failed to create category." "ERROR"
  clear
  exit 1
fi


#//////////////////////////////////////////////////////////////////////////////#
#@@@@@@@@@@@@@@@@@@@    Creat the config.py        @@@@@@@@@@@@@@@@@@@@@@@@@@@@#
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\#
cat << EOF > config.py
class Config:
    """Base configuration."""
    MYSQL_DATABASE_HOST = '$mysql_host'
    MYSQL_DATABASE_USER = '$mysql_user'
    MYSQL_DATABASE_PASSWORD = '$mysql_password'
    MYSQL_DATABASE_DB = '$mysql_db'
    MYSQL_DATABASE_PORT = 3306
    JAMF_PRO_URL = '$jamf_pro_url'
    JAMF_PRO_USERNAME = '$jamf_pro_username'
    JAMF_PRO_PASSWORD = '$jamf_pro_password'
    CATEGORY_ID = $category_id
    CATEGORY_NAME = "$category_name"
    PROFILE_DESCRIPTION = "This profile is used on the backend of your system.  Please ignore this."
    ACTIVATION_CODE = "$license"
    CELERY_BROKER_URL = 'redis://localhost:6379/0'
    CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = 'UTC'


class DevelopmentConfig(Config):
    USE_WAITRESS = False
    DEBUG = True
    TESTING = True
    TOKEN_EXPIRATION = 60 #in seconds.  31556926=year 2629743=month 86400=day 3600=hour

class TestingConfig(Config):
    USE_WAITRESS = False
    TESTING = True
    TOKEN_EXPIRATION = 2629743 #in seconds.  31556926=year 2629743=month 86400=day 3600=hour

class ProductionConfig(Config):
    USE_WAITRESS = True
    TOKEN_EXPIRATION = 2629743 #in seconds.  31556926=year 2629743=month 86400=day 3600=hour
EOF
log "config.py generated" "INFO"


#//////////////////////////////////////////////////////////////////////////////#
#|||||||||||    Create the service and directory structure      |||||||||||||||#
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\#
###############################################################################
# Create the gustave user
###############################################################################
dialog --infobox "Creating gustave user..." 10 40
log "Creating gustave user." "INFO"
sleep 1
output=$(sudo adduser --system --group gustave --no-create-home 2>&1)
if [ $? -eq 0 ]; then
    log "Created the gustave user." "INFO"
else
    log "Failed to create the gustave user. Error: $output" "ERROR"
fi

###############################################################################
# Create directory
###############################################################################
dialog --infobox "Creating gustave directory..." 10 40
output=$(sudo mkdir -p /etc/gustave 2>&1)
if [ $? -eq 0 ]; then
    log "Created the gustave directory." "INFO"
else
    log "Failed to create the gustave directory. Error: $output" "ERROR"
fi

###############################################################################
# Move the gustave executable to the proper location
###############################################################################
dialog --infobox "Moving the gustave executable to the proper location..." 10 40
sleep 1
output=$(sudo mv ./.Binaries/gustave /usr/local/bin/gustave 2>&1)
if [ $? -eq 0 ]; then
    log "gustave moved properly." "INFO"
else
    log "Failed to move gustave. Error: $output" "ERROR"
fi

###############################################################################
# Set the owner to gustave
###############################################################################
dialog --infobox "Setting the owner to gustave..." 10 40
sleep 1
output=$(sudo chown gustave:gustave /usr/local/bin/gustave 2>&1)
if [ $? -eq 0 ]; then
    log "Permissions configured for gustave." "INFO"
else
    log "Failed to configure for gustave. Error: $output" "ERROR"
fi

###############################################################################
# Set the permissions
###############################################################################
dialog --infobox "Setting the permissions..." 10 40
sleep 1
output=$(sudo chmod 755 /usr/local/bin/gustave 2>&1)
if [ $? -eq 0 ]; then
    log "Modified gustave." "INFO"
else
    log "Failed to modify gustave. Error: $output" "ERROR"
fi

###############################################################################
#Setup and configure the necessary services
###############################################################################
dialog --infobox "Setting up the gustave service..." 10 40
setup_service "./.Services/gustave.service" "/etc/systemd/system/gustave.service" "root:root" "644"

dialog --infobox "Setting up the gustave-jobs service..." 10 40
setup_service "./.Services/gustave-jobs.service" "/etc/systemd/system/gustave-jobs.service" "root:root" "644"

dialog --infobox "Setting up the gustave-scheduler service..." 10 40
setup_service "./.Services/gustave-scheduler.service" "/etc/systemd/system/gustave-scheduler.service" "root:root" "644"

dialog --infobox "Setting up the gustave target..." 10 40
setup_service "./.Services/gustave.target" "/etc/systemd/system/gustave.target" "root:root" "644"

###############################################################################
# Move the config.py file to the proper location
###############################################################################
dialog --infobox "Moving the config.py file to the proper location..." 10 40
sleep 1
output=$(sudo mv ./config.py /etc/gustave/config.py 2>&1)
if [ $? -eq 0 ]; then
    log "Moved config.py into place." "INFO"
else
    log "Failed to move config.py into place. Error: $output" "ERROR"
fi

###############################################################################
# Set the owner and permissions for the config file
###############################################################################
dialog --infobox "Setting the owner and permissions for the config file..." 10 40
sleep 1
output=$(sudo chown gustave:gustave /etc/gustave/config.py 2>&1)
if [ $? -eq 0 ]; then
    log "Set owner /etc/gustave/config.py to gustave:gustave." "INFO"
else
    log "Failed to set owner /etc/gustave/config.py to gustave:gustave. Error: $output" "ERROR"
fi
sleep 1
output=$(sudo chmod 644 /etc/gustave/config.py 2>&1)
if [ $? -eq 0 ]; then
    log "Modified /etc/gustave/config.py to 644." "INFO"
else
    log "Failed to modify /etc/gustave/config.py to 644. Error: $output" "ERROR"
fi

###############################################################################
# Reload the systemd daemon to recognize the new services and target
###############################################################################
dialog --infobox "Reloading the systemd daemon to recognize the new services and target..." 10 40
sleep 1
output=$(sudo systemctl daemon-reload 2>&1)
if [ $? -eq 0 ]; then
    log "Reloaded the systemd daemon." "INFO"
else
    log "Failed to reload the systemd daemon. Error: $output" "ERROR"
fi

###############################################################################
# Enable the gustave.target so all services start on boot
###############################################################################
dialog --infobox "Enabling the gustave.target so all services start on boot..." 10 40
output=$(sudo systemctl enable gustave.target 2>&1)
if [ $? -eq 0 ]; then
    log "Enabled the gustave.target." "INFO"
else
    log "Failed to enable the gustave.target. Error: $output" "ERROR"
fi

###############################################################################
# Start the gustave.target
###############################################################################
dialog --infobox "Starting the gustave.target..." 10 40
output=$(sudo systemctl start gustave.target 2>&1)
if [ $? -eq 0 ]; then
    log "Started the gustave.target." "INFO"
else
    log "Failed to start the gustave.target. Error: $output" "ERROR"
fi

# Check if main gustave service is running
systemctl is-active --quiet gustave
if [ $? -eq 0 ]; then
    activate=1
    log "gustave service is running." "INFO"
else
    activate=0
    log "gustave service failed to start....  Please check the install.log for more information." "ERROR"
fi

# Display the activation in progress message
dialog --title "Activation" --infobox "Activating product... Please wait." 10 40
sleep 2

# Attempt to activate the license
log "Reaching out to activate license" "INFO"
response=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"license_key\":\"$license\"}" https://chequamegon.chippewa.io/api/activate 2>&1)
status=$(echo $response | jq -r '.message')

# Check the activation response
if [ "$status" == "License activated" ]; then
    dialog --title "Activation" --infobox "Activation successful!" 10 40
    log "License activation successful. Response: $response" "INFO"
    sleep 2

    expiry_response=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"license_key\":\"$license\"}" $server/api/verify 2>&1)
    expiry=$(echo $expiry_response | jq -r '.remaining_time')
    
    if [ -z "$expiry" ]; then
        log "Error checking license expiry. Response: $expiry_response" "ERROR"
    else
        log "License expiry checked. Remaining time: $expiry" "INFO"
    fi
else
    dialog --title "Activation" --infobox "Activation failed! Check logs for details." 10 40
    log "Activation failed! Response: $response" "ERROR"
    sleep 2
    clear
    exit 1
fi



#//////////////////////////////////////////////////////////////////////////////#
#|||||||||||||||||||||||||       Finish Up        |||||||||||||||||||||||||||||#
#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\#
###############################################################################
# Completion message
###############################################################################
dialog --msgbox "Installation complete!  Please examine the log to ensure there were no errors." 0 0
log "Installation complete!" "INFO"
clear
exit 0
###############################################################################